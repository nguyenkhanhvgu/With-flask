version: '3.8'

services:
  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static:ro
      - ./ssl:/etc/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - app1
      - app2
    restart: unless-stopped
    networks:
      - frontend
      - backend

  # Primary application server
  app1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://flask_user:${DB_PASSWORD}@db:5432/flask_blog_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - GUNICORN_WORKERS=4
      - GUNICORN_WORKER_CLASS=gevent
    volumes:
      - ./static/uploads:/app/static/uploads
      - app_logs:/var/log/flask-blog
      - gunicorn_logs:/var/log/gunicorn
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Secondary application server (backup)
  app2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://flask_user:${DB_PASSWORD}@db:5432/flask_blog_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - GUNICORN_WORKERS=2
      - GUNICORN_WORKER_CLASS=gevent
    volumes:
      - ./static/uploads:/app/static/uploads
      - app_logs:/var/log/flask-blog
      - gunicorn_logs:/var/log/gunicorn
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=flask_blog_prod
      - POSTGRES_USER=flask_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/var/backups/postgresql
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flask_user -d flask_blog_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis cache and session store
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
      - ./docker/redis.prod.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  # Database backup service
  backup:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - DATABASE_URL=postgresql://flask_user:${DB_PASSWORD}@db:5432/flask_blog_prod
      - BACKUP_DIR=/var/backups/flask-blog
      - RETENTION_DAYS=30
    volumes:
      - postgres_backups:/var/backups/flask-blog
      - backup_logs:/var/log/backup
    depends_on:
      - db
    restart: "no"
    networks:
      - backend
    command: /app/scripts/backup_database.sh
    profiles:
      - backup

  # Log aggregation and monitoring
  logrotate:
    image: alpine:latest
    volumes:
      - app_logs:/var/log/flask-blog
      - gunicorn_logs:/var/log/gunicorn
      - nginx_logs:/var/log/nginx
      - backup_logs:/var/log/backup
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache logrotate &&
        echo '
        /var/log/flask-blog/*.log {
          daily
          rotate 30
          compress
          delaycompress
          missingok
          notifempty
          create 644 root root
        }
        /var/log/gunicorn/*.log {
          daily
          rotate 30
          compress
          delaycompress
          missingok
          notifempty
          create 644 root root
        }
        /var/log/nginx/*.log {
          daily
          rotate 30
          compress
          delaycompress
          missingok
          notifempty
          create 644 root root
        }
        ' > /etc/logrotate.d/flask-blog &&
        while true; do
          logrotate -f /etc/logrotate.d/flask-blog
          sleep 86400
        done
      "

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  app_logs:
    driver: local
  gunicorn_logs:
    driver: local
  backup_logs:
    driver: local